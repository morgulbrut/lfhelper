import (
	"bytes"
	"fmt"
	"io/ioutil"
	"strings"
	"unicode/utf16"
	"unicode/utf8"

	"github.com/dimchansky/utfbom"
)

func main() {
	trySkip([]byte("\xFF\xFE\x2C\x00\x50\x00\x72\x00\x6F\x00\x67\x00\x72\x00\x61\x00\x6D\x00\x6D\x00\x6E\x00\x61\x00\x6D\x00\x65\x00"))
	trySkip([]byte("hello"))

	utf, _ := DecodeUTF16([]byte("\xFF\xFE\x2C\x00\x50\x00\x72\x00\x6F\x00\x67\x00\x72\x00\x61\x00\x6D\x00\x6D\x00\x6E\x00\x61\x00\x6D\x00\x65\x00"))
	fmt.Println(utf)
	fmt.Println([]byte(utf))
	if strings.Contains(utf, "name") {
		fmt.Println("... found")
	}
}

func trySkip(byteData []byte) {
	fmt.Println("Input:", byteData)

	// just skip BOM
	output, err := ioutil.ReadAll(utfbom.SkipOnly(bytes.NewReader(byteData)))
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println("ReadAll with BOM skipping", output)
	fmt.Println(string(output))
	if strings.Contains(string(output), "name") {
		fmt.Println("... found")
	}

	// skip BOM and detect encoding
	sr, enc := utfbom.Skip(bytes.NewReader(byteData))
	fmt.Printf("Detected encoding: %s\n", enc)
	output, err = ioutil.ReadAll(sr)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println("ReadAll with BOM detection and skipping", output)
	fmt.Println(string(output))

	fmt.Println()
}

func DecodeUTF16(b []byte) (string, error) {

	if len(b)%2 != 0 {
		return "", fmt.Errorf("Must have even length byte slice")
	}

	u16s := make([]uint16, 1)

	ret := &bytes.Buffer{}

	b8buf := make([]byte, 4)

	lb := len(b)
	for i := 0; i < lb; i += 2 {
		u16s[0] = uint16(b[i]) + (uint16(b[i+1]) << 8)
		r := utf16.Decode(u16s)
		n := utf8.EncodeRune(b8buf, r[0])
		ret.Write(b8buf[:n])
	}

	return ret.String(), nil
}
